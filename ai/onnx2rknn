from rknn.api import RKNN
import os
import cv2
import numpy
import onnxruntime


def cosine_similarity(a, b):
    assert a.shape == b.shape
    # 计算点积
    dot_product = numpy.sum(a * b, axis=(-2, -1))
    
    # 计算范数
    norm_a = numpy.linalg.norm(a, axis=(-2, -1))
    norm_b = numpy.linalg.norm(b, axis=(-2, -1))
    
    # 计算余弦相似度
    similarity = dot_product / (norm_a * norm_b)
    return similarity



def euclidean_distance(a, b):
    return numpy.sqrt(numpy.sum((a - b) ** 2))

if __name__ == '__main__':
    platform = 'rk3588'

    '''step 1: create RKNN object'''
    rknn = RKNN()

    '''step 2: load the .onnx model'''
    rknn.config(target_platform='rk3588')  ### 设置均值方差等
    print('--> Loading model')
    # ret = rknn.load_onnx(model='face_det_10g.onnx',inputs =['input.1'],input_size_list=[[1,3,640,640]])
    # ret = rknn.load_onnx(model='yolov8_m.onnx')
    ret = rknn.load_onnx(model='face_w600k_r50.onnx',inputs =['input.1'],input_size_list=[[1,3,112,112]])
    if ret != 0:
        print('load model failed')
        exit(ret)
    print('done')

    '''step 3: building model'''
    print('-->Building model')
    ret = rknn.build(do_quantization=False)    
    if ret != 0:
        print('build model failed')
        exit()
    print('done')

    '''step 4: export and save the .rknn model'''
    OUT_DIR = 'rknn_models'
    RKNN_MODEL_PATH = './{}/face_w600k_r50.rknn'.format(OUT_DIR)
    if not os.path.exists(OUT_DIR):
        os.mkdir(OUT_DIR)
    print('--> Export RKNN model: {}'.format(RKNN_MODEL_PATH))
    ret = rknn.export_rknn(RKNN_MODEL_PATH)
    if ret != 0:
        print('Export rknn model failed.')
        exit(ret)
    print('done')
    

    # Init runtime environment
    print('--> Init runtime environment')
    ret = rknn.init_runtime(target=None, device_id=None, perf_debug=True)
    # ret = rknn.init_runtime(target='rk3566')
    if ret != 0:
        print('Init runtime environment failed!')
        exit(ret)
    print('done')

    # Inference
    print('--> Running model')
    img = cv2.imread('/home/hz/hz_lyb/2021108205/2021108205.jpg')
    img = cv2.resize(img,(112,112))
    img = numpy.expand_dims(img,axis=0)
    img = img.astype(numpy.float32)
    img = img.transpose(0,3,2,1)
    outputs = rknn.inference(inputs=[img], data_format='nchw')[0]
    print(outputs)

    
    # onnxruntime 
    session = onnxruntime.InferenceSession(path_or_bytes='face_w600k_r50.onnx',providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
    sess_input = {session.get_inputs()[0].name: img}
    sess_output = []
    for out in session.get_outputs():
        sess_output.append(out.name)
    print(sess_input)
    print(sess_output)
    onnx_outputs = session.run(sess_output, sess_input)[0]
    print(onnx_outputs)


    dis_cos = cosine_similarity(outputs,onnx_outputs)
    dis = euclidean_distance(outputs,onnx_outputs)

    print('cosine_similarity',dis_cos)
    print('euclidean_distance',dis)
    '''step 5: release the model'''
    rknn.release()
    print('done')
